// dynamic_array.cpp

#include "dynamic_array.h"
#include <default_allocator.h>
#include <iostream>

namespace StevensDev {
namespace sgdc {

template<typename T>
void DynamicArray<T>::push( const T& element ) {
    if( length >= maxSize ) {
        reallocate( length + 10 );
    }
    array[length] = &element;
    length++;
}

template<typename T>
DynamicArray<T>::DynamicArray() {
    arrayAlloc = DefaultAllocator();
    maxSize = 10;
    array = arrayAlloc.get(sizeof(T) * maxSize);
    length = 0;
}
template<typename T>
DynamicArray<T>::DynamicArray( IAllocator* alloc ) {
    *arrayAlloc = alloc;
    array = arrayAlloc.get(sizeof(T) * maxSize);
    length = 0;
}
template<typename T>
DynamicArray<T>::DynamicArray( DynamicArray otherArray ) {
    arrayAlloc = DefaultAllocator();
    maxSize = otherArray.getLength();
    array = arrayAlloc.get(sizeof(T) * 10);
    int i = 0;
    for( i = 0; i < maxSize; i++ ) {
        push( array[i] );
    }
    length = otherArray.getLength();
}

template<typename T>
DynamicArray<T>::~DynamicArray() { }

template<typename T>
DynamicArray DynamicArray<T>::&operator = ( const DynamicArray &otherArray ) {
    arrayAlloc = DefaultAllocator();
    maxSize = &otherArray.getLength();
    int i = 0;
    for( i = 0; i < maxSize; i++ ) {
        push( array[i] );
    }
    length = &otherArray.getLength();
    delete( array );
}

template<typename T>
void DynamicArray<T>::pushFront( T element) {
    if( length >= maxSize ) {
        reallocate( length + 10 );
    }
    shiftRight( 0 );
    array[0] = &element;
    length++;
}

T DynamicArray<T>::pop() {
    T poppedElement = array[length];
    array[length - 1] = nullptr;
    length--;
    return poppedElement;
}

T DynamicArray<T>::popFront() {
    T poppedElement = array[0];
    shiftLeft( 1 );
    length--;
    return poppedElement;
}

unsigned int const DynamicArray<T>::getLength() {
    return length;
}

T const DynamicArray<T>::at( unsigned int index ) {
    try {
        if( index >= length ) {
            throw;
        }
        return array[index];
    }
    catch (Exception e) {
        cout << "Out of bounds exception." << endl;
        return nullptr;
    }
}

T DynamicArray<T>::operator [] ( int index ) {
    return array[index];

}
T const DynamicArray<T>::operator [] ( int index ) {
    return array[index];
}

T DynamicArray<T>::removeAt( unsigned int index ) {
    T removedElement = array[index];
    shiftLeft( index + 1 );
    length--;
    return removedElement;
}

void DynamicArray<T>::insertAt( unsigned int index, const T &element ) {
    shiftRight( index );
    array[index] = &element;
    length++;
}

void DynamicArray<T>::shiftLeft( int startingIndex ) {
    int i = (startingIndex == 0) ? 1 : 0;   // Used to prevent out of bounds
    for( i; i < length; i++) {
        array[i - 1] = array[i];
    }
    array[i] = nullptr;
}

void DynamicArray<T>::shiftRight( int startingIndex ) {
    if( length >= maxSize ) {
        reallocate( length + 10 );
    }
    int i;
    for( i = length - 1; i > startingIndex; i-- ) {
        array[i] = array[i - 1];
    }
    array[i] = nullptr;
}

void DynamicArray<T>::reallocate( int size ) {
    T* newArray = arrayAlloc.get( sizeof(T) * size );
    int i;
    for( i = 0; i < length; i++ ) {
        newArray[i] = array[i];
    }
    arrayAlloc.release( array, sizeof( T ) * maxSize );
    array = newArray;
}
}
}


