// map.h

#ifndef MAP_H
#define MAP_H

#include <dynamic_array.h>
#include <exception>
#include <iallocator.h>
#include <string>

namespace StevensDev {
namespace sgdc {
template<typename T> class Map {
  private:
    struct node {
        std::string key;
        T value;
    };
    DynamicArray<node> table;
    sgdm::DefaultAllocator<T> allocator;
      // MEMBER FUNCTIONS //
    int hash( const std::string &key ) {
        int hashValue = 0;
        int i = 0;
        for ( i= 0; i < key.length(); i++ ) {
            hashValue += key[i];
        }
        hashValue = hashValue % table.getMaxSize();
        return hashValue;
    }
  public:
     // CONSTRUCTORS //
    Map() {
        allocator = sgdm::DefaultAllocator<T>();
    }
      // default constructor
    Map( sgdm::IAllocator<T>* alloc ) {
        allocator = alloc;
    }
      // constructor for allocator
      // FREE OPERATORS //
    Map &operator = ( const Map<T> &otherMap);
      // assignment operator
    T &operator [] ( const std::string& key ) {
        int hashValue = hash( key );
        while ( table[hashValue].value != 0 ) {
            hashValue += 1;
            if (hashValue > table.getLength() ) {
                hashValue = 0;
            }
        }
        node newNode;
        newNode.key = key;
        table.insertAt( hashValue, newNode );
        return table[hashValue].value;
    }
      // Mutable
    T &operator [] ( const std::string &key ) const {
        int hashValue = hash( key );

        return table[hashValue].value;
    }
      // No mutation
      // ACCESSORS //
    bool has( const std::string &key ) {
        int hashValue = hash( key );
        try {
            table[hashValue];
            return true;
        }
        catch( std::exception& e ) {
            return false;
        }
    }
          // Determines if a key exists in the map
    DynamicArray<std::string> keys() const {
        int i = 0;
        DynamicArray<std::string> keyArray;;
        for( i = 0; i < table.getMaxSize(); i++ ) {
            if ( table[i].key != "" ) {
                keyArray.push( table[i].key );
            }
        }
        return keyArray;
    }
      // Retrives all key (immutable)
    DynamicArray<T> values() const {
        int i = 0;
        DynamicArray<T> valueArray;
        for( i = 0; i < table.getLength(); i++ ) {
            if ( table[i].key != "" ) {
            valueArray.push( table.at( i ).value );
        }
        return valueArray;
    }
      // Retrieves all values (immutable)
      // MUTATORS //
    
    T remove( const std::string& key ) {
        if( !has( key ) ) {
            return 0;
        }
        int hashValue = hash( key );
        T removedValue = table[hashValue].value;
        table[hashValue] = node();
        return removedValue;
    }
      // Removes a key-value
};
}
}

#endif
